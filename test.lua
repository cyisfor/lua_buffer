require('luarocks.loader')

local downloadRequire = require('fancyrequire.download')
local compileRequire = require('fancyrequire.compile')
local withTests = downloadRequire('minitest')
local assert = downloadRequire('luassert')

withTests(function(c) 
    c:describe("buffers",function(c)
        c:it("require", function(c)
            assert(c)
            compileRequire('_buffer')
            local buffer = require('buffer')
            c:it("create",function(c)
                assert.userdata(buffer("this is a test").self)
            end)
            c:it("equal",function(c)
                assert.equals(buffer("this is a test"),buffer("this is a test"))
                assert.is_not.equals(buffer("this is a test"),buffer("test"))
                assert.is_not.equals(buffer("this is a test"),buffer("derp is a test"))
                assert.is_not.equals(buffer("this is a test"),buffer("this is a test 2"))
            end)
            c:it("fill",function(c)
                local b = buffer("this is a test")
                b:fill("this is a derp")
                assert.equals(b,buffer("this is a derp"))
            end)
            c:it("slice",function(c)
                local a = buffer("this is a test")
                local b = a:slice(3,5)
                assert.equals(buffer("s is "):slice(),b)
            end)
            c:it("string", function(c)
                local a = buffer("this is a test")
                assert.same("this is a test", a:tostring())
            end)
            c:it("clone", function(c)
                local a = buffer("this is a test ");
                local b = a:clone();
                a:fill("that was a test");
                assert.same("that was a test", a:tostring())
                assert.same("this is a test ", b:tostring())
            end)
        end)
    end)
end,true)
